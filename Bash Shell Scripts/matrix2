#!/bin/bash

###Michael Patson
###Oregon State CS 344
###Assignemnt 1 Matrix


#prints eror message stderr, nothng to stout and return val !-0 
#if arge count is greater than 1 (gets two matrices)
#if arg count is 1 but contains ono matrix
#else prints ROW COLS, space seperate to stdout, nothng stdeer and returns 0


dims()
{
	currLineNum=0
	nCol=0
	while read line
	do 
    currLineNum=$((currLineNum+1))
    #echo $currLineNum #for testing only
	done <"$datafilepath"
    
#additional head command here http://www.linfo.org/head.html
#used to count numbers of argsand write to file matrixOne

        nCol=$(head -n 1 $datafilepath | wc -w)
echo $currLineNum $nCol
}

#matrix transponse [m1]
#takes on arg


transpose()
{

tempRow="temprowfile"
tempCol="tempcolfile"


# Append each number onto the end of a
# temporary column file  by cutting
# specific columns using the i variable


nCol=0
nCol=$(head -n 1 $datafilepath | wc -w)
##echo nCol is $nCol
i=1
	
	while [ "$nCol" -ge "$i" ]; 
  do
     cut -f $i $datafilepath > $tempCol
     cat $tempCol | tr -s '\n' '\t' > "$tempRow"
     
     rev "$tempRow" > "temp1"
     cat "temp1" | cut -c 2-  >"temp2"
     
     
     #cut two from left
     
     rev "temp2" > $tempRow
     cat $tempRow
     i=$((i+1))
done
rm temp2
rm temp1

}


mean()
{
#first transpose so I can quickly sum rows

 #This is the first attempt, trying to transpose

tempRow="temprowfile"
tempCol="tempcolfile"


# Append each number onto the end of a
# temporary column file  by cutting
# specific columns using the i variable

nCol=0
nCol=$(head -n 1 $datafilepath | wc -w)
##echo nCol is $nCol
x=1

echo '' >temp3
#start same as transpose for rows
	
	while [ "$nCol" -ge "$x" ]; 
  do
     cut -f $x $datafilepath > $tempCol
     cat $tempCol | tr -s '\n' '\t' > "$tempRow"
     rev "$tempRow" > "temp1"
     cat "temp1" | cut -c 2-  >"temp2" 
     
     rev "temp2" > $tempRow
     
     
     while read i
        do
          sum=0
          count=0
          for num in $i
          do
            sum=$(($sum + $num))
            count=$((count+1))

          done
          mean=$(((sum + (count/2)*( (sum>0)*2-1 )) / count))
        
        echo $mean >>temp3
        echo -e '\t'>>temp3
            
         done <$tempRow 

     x=$((x+1))
done
 echo ''>temp4

cat -A temp3
cat $temp3 | tr '\n' '\t' > temp4

rm temp1
rm temp2

}




#####starts here
args=$#     # Number of args passed.

if [ "$args" -eq 0 ]; then
               echo "No arguments" 1>&2
               exit 1
fi

#call dims
if [ "$1" = "dims" ]; then
            if [ "$args" -gt 2 ]; then #if too man args, error
              echo "Too many arguments" 1>&2
              exit 1
            fi
            
            
    
    #thank the big guy you posted this
    datafilepath="datafile$$"
    if [ "$#" = "1" ]
        then
        cat > "$datafilepath"
    elif [ "$#" = "2" ]; then
                if [ ! -f "$2" ]; then

                  echo "Invalid Input File" 1>&2  ## stdout to stderr 
                  exit 1
                fi
    datafilepath=$2
    fi            
    
    #actual call
    dims $datafilepath
fi

#call Transpose
if [ "$1" = "transpose" ]; then
            if [ "$args" -gt 2 ]; then #if too man args, error
              echo "Too many arguments" 1>&2
              exit 1
              fi
 
 
    #thank the big guy you posted this
    datafilepath="datafile$$"
    if [ "$#" = "1" ]
        then
        cat > "$datafilepath"
    elif [ "$#" = "2" ]; then
                if [ ! -f "$2" ]; then

                  echo "Invalid Input File" 1>&2  ## stdout to stderr 
                  exit 1
                fi
    datafilepath=$2
    fi            
    
    #actual call
    transpose $datafilepath


fi


##call the mean
if [ "$1" = "mean" ]; then
            if [ "$args" -gt 2 ]; then #if too man args, error
              echo "Too many arguments" 1>&2
              exit 1
              fi
 
 
    #thank the big guy you posted this
    datafilepath="datafile$$"
    if [ "$#" = "1" ]
        then
        cat > "$datafilepath"
    elif [ "$#" = "2" ]; then
                if [ ! -f "$2" ]; then

                  echo "Invalid Input File" 1>&2  ## stdout to stderr 
                  exit 1
                fi
    datafilepath=$2
    fi            
    
    #actual call
    mean $datafilepath


fi
